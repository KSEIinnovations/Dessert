<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// 
// ConditionTests.cs
//  
// Author(s):
//       Alessio Parma <alessio.parma@gmail.com>
// 
// Copyright (c) 2012-2016 Alessio Parma <alessio.parma@gmail.com>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

namespace Dessert.Tests.Events
{
	using System.Collections.Generic;
	using System.Diagnostics;
    using Dessert.Events;
    using NUnit.Framework;

	partial class ConditionTests
	{
<# for (var i = 2; i <= MaxEventCount; ++i) { #>
		IEnumerable<SimEvent> AndConditionChecker<#= ConditionGenerics(i) #>(BoolWrapper finished, <#= Condition(i) #> cond, <#= ConditionParams(i) #>) <#= ConditionClauses(i, 3) #>
		{
			Debug.Assert(!finished);
			yield return cond;
			Assert.AreEqual(<#= i #>, cond.Value.Count);
			Assert.AreSame(Env, cond.Env);
<# for (var j = 1; j <= i; ++j) { #>
			Assert.AreSame(ev<#= j #>, cond.Ev<#= j #>);
			Assert.AreSame(Env, cond.Ev<#= j #>.Env);
			Assert.True(cond.Ev<#= j #> && cond.Ev<#= j #>.Succeeded);
<# } #>
			finished.Value = true;
		}

		[Test]
		public void AllOf_<#= i #>SingleTimeouts()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished = new BoolWrapper();
			var cond = Env.AllOf(t1<# for (var j = 2; j <= i; ++j) { #>, t<#= j #><# } #>);
			Env.Process(AndConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

		[Test]
		public void And_<#= i #>SingleTimeouts_Method_LeftToRight()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #>.And(t<#= j #>)<# } #>;
			Env.Process(AndConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

		[Test]
		public void And_<#= i #>SingleTimeouts_Operator_LeftToRight()
		{
<# for (var j = 1; j <= i; ++j) { #>
			SimEvent t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished  = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #> & t<#= j #><# } #>;
			Env.Process(AndConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

<# if (i < MaxEventCount) { #>
		[Test]
		public void And_<#= i #>SingleTimeouts_Method_LeftToRight_Nested()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Condition<SimEvent>(Env.Timeout(<#= j #>), c => c.Ev1);
<# } #>
			var finished = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #>.And(t<#= j #>)<# } #>;
			Env.Process(AndConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #>.Ev1<# } #>));
			Env.Run();
			Assert.True(finished);
		}
<# } #>
		[Test]
		public void And_<#= i #>SingleTimeouts_Operator_LeftToRight_Nested()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Condition<SimEvent>(Env.Timeout(<#= j #>), c => c.Ev1);
<# } #>
			var finished  = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #> & t<#= j #><# } #>;
			Env.Process(AndConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #>.Ev1<# } #>));
			Env.Run();
			Assert.True(finished);
		}

		[Test]
		public void And_<#= i #>SingleTimeouts_Method_RightToLeft()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #>.And(t<#= j #><# } #><# for (var j = 2; j <= i; ++j) { #>)<# } #>;
			Env.Process(AndConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

		[Test]
		public void And_<#= i #>SingleTimeouts_Operator_RightToLeft()
		{
<# for (var j = 1; j <= i; ++j) { #>
			SimEvent t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished  = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #> & (t<#= j #><# } #><# for (var j = 2; j <= i; ++j) { #>)<# } #>;
			Env.Process(AndConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

<# if (i < MaxEventCount) { #>
		[Test]
		public void And_<#= i #>SingleTimeouts_Method_RightToLeft_Nested()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Condition<SimEvent>(Env.Timeout(<#= j #>), c => c.Ev1);
<# } #>
			var finished = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #>.And(t<#= j #><# } #><# for (var j = 2; j <= i; ++j) { #>)<# } #>;
			Env.Process(AndConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #>.Ev1<# } #>));
			Env.Run();
			Assert.True(finished);
		}
<# } #>
		[Test]
		public void And_<#= i #>SingleTimeouts_Operator_RightToLeft_Nested()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Condition<SimEvent>(Env.Timeout(<#= j #>), c => c.Ev1);
<# } #>
			var finished  = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #> & (t<#= j #><# } #><# for (var j = 2; j <= i; ++j) { #>)<# } #>;
			Env.Process(AndConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #>.Ev1<# } #>));
			Env.Run();
			Assert.True(finished);
		}

		IEnumerable<SimEvent> OrConditionChecker<#= ConditionGenerics(i) #>(BoolWrapper finished, <#= Condition(i) #> cond, <#= ConditionParams(i) #>) <#= ConditionClauses(i, 3) #>
		{
			Debug.Assert(!finished);
			yield return cond;
			Assert.AreEqual(1, cond.Value.Count);
			Assert.AreSame(Env, cond.Env);
			Assert.AreSame(ev1, cond.Ev1);
			Assert.AreSame(Env, cond.Ev1.Env);
			Assert.True(cond.Ev1 && cond.Ev1.Succeeded);
<# for (var j = 2; j <= i; ++j) { #>
			Assert.AreSame(ev<#= j #>, cond.Ev<#= j #>);
			Assert.AreSame(Env, cond.Ev<#= j #>.Env);
			Assert.False(cond.Ev<#= j #> || cond.Ev<#= j #>.Succeeded);
<# } #>
			finished.Value = true;
		}

		[Test]
		public void AnyOf_<#= i #>SingleTimeouts()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished = new BoolWrapper();
			var cond = Env.AnyOf(t1<# for (var j = 2; j <= i; ++j) { #>, t<#= j #><# } #>);
			Env.Process(OrConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

		[Test]
		public void Or_<#= i #>SingleTimeouts_Method_LeftToRight()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #>.Or(t<#= j #>)<# } #>;
			Env.Process(OrConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

		[Test]
		public void Or_<#= i #>SingleTimeouts_Operator_LeftToRight()
		{
<# for (var j = 1; j <= i; ++j) { #>
			SimEvent t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished  = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #> | t<#= j #><# } #>;
			Env.Process(OrConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

<# if (i < MaxEventCount) { #>
		[Test]
		public void Or_<#= i #>SingleTimeouts_Method_LeftToRight_Nested()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Condition<SimEvent>(Env.Timeout(<#= j #>), c => c.Ev1);
<# } #>
			var finished = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #>.Or(t<#= j #>)<# } #>;
			Env.Process(OrConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #>.Ev1<# } #>));
			Env.Run();
			Assert.True(finished);
		}
<# } #>
		[Test]
		public void Or_<#= i #>SingleTimeouts_Operator_LeftToRight_Nested()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Condition<SimEvent>(Env.Timeout(<#= j #>), c => c.Ev1);
<# } #>
			var finished  = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #> | t<#= j #><# } #>;
			Env.Process(OrConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #>.Ev1<# } #>));
			Env.Run();
			Assert.True(finished);
		}

		[Test]
		public void Or_<#= i #>SingleTimeouts_Method_RightToLeft()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #>.Or(t<#= j #><# } #><# for (var j = 2; j <= i; ++j) { #>)<# } #>;
			Env.Process(OrConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

		[Test]
		public void Or_<#= i #>SingleTimeouts_Operator_RightToLeft()
		{
<# for (var j = 1; j <= i; ++j) { #>
			SimEvent t<#= j #> = Env.Timeout(<#= j #>);
<# } #>
			var finished  = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #> | (t<#= j #><# } #><# for (var j = 2; j <= i; ++j) { #>)<# } #>;
			Env.Process(OrConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #><# } #>));
			Env.Run();
			Assert.True(finished);
		}

<# if (i < MaxEventCount) { #>
		[Test]
		public void Or_<#= i #>SingleTimeouts_Method_RightToLeft_Nested()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Condition<SimEvent>(Env.Timeout(<#= j #>), c => c.Ev1);
<# } #>
			var finished = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #>.Or(t<#= j #><# } #><# for (var j = 2; j <= i; ++j) { #>)<# } #>;
			Env.Process(OrConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #>.Ev1<# } #>));
			Env.Run();
			Assert.True(finished);
		}
<# } #>
		[Test]
		public void Or_<#= i #>SingleTimeouts_Operator_RightToLeft_Nested()
		{
<# for (var j = 1; j <= i; ++j) { #>
			var t<#= j #> = Env.Condition<SimEvent>(Env.Timeout(<#= j #>), c => c.Ev1);
<# } #>
			var finished  = new BoolWrapper();
			var cond = t1<# for (var j = 2; j <= i; ++j) { #> | (t<#= j #><# } #><# for (var j = 2; j <= i; ++j) { #>)<# } #>;
			Env.Process(OrConditionChecker(finished, cond<# for (var j = 1; j <= i; ++j) { #>, t<#= j #>.Ev1<# } #>));
			Env.Run();
			Assert.True(finished);
		}

<# } #>

		sealed class BoolWrapper
		{
			public bool Value;

			public static implicit operator bool(BoolWrapper b)
			{
				return b.Value;
			}
		}
	}
}

<#+ // Functions used throughout the template
const int MaxEventCount = 5;

static string Condition(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<T1");
	for (var i = 2; i <= eventCount; ++i) {
		builder.AppendFormat(", T{0}", i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string Condition(int eventCount, int from)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<T" + from);
	for (var i = 1; i < eventCount; ++i) {
		builder.AppendFormat(", T{0}", from + i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string ConditionClauses(int eventCount, int tabCount)
{
	Debug.Assert(eventCount >= 1);
	var tabBuilder = new StringBuilder();
	for (var i = 0; i < tabCount; ++i) {
		tabBuilder.Append("    ");
	}
	var tabs = tabBuilder.ToString();
	var clauseBuilder = new StringBuilder();
	clauseBuilder.AppendLine();
	for (var i = 0; i < eventCount; ++i) {
		clauseBuilder.Append(tabs);
		clauseBuilder.AppendFormat("where T{0} : SimEvent", i + 1);
		if (i != eventCount - 1) {
			clauseBuilder.AppendLine();		
		}
	}
	return clauseBuilder.ToString();
}

static string ConditionGenerics(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("<T1");
	for (var i = 2; i <= eventCount; ++i) {
		builder.AppendFormat(", T{0}", i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string ConditionParams(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("T1 ev1");
	for (var i = 2; i <= eventCount; ++i) {
		builder.AppendFormat(", T{0} ev{0}", i);
	}
	return builder.ToString();
}

static string GenericCondition(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<SimEvent");
	for (var i = 2; i <= eventCount; ++i) {
		builder.Append(", SimEvent");
	}
	builder.Append('>');
	return builder.ToString();
}

static string GenericCondition(int eventCount, int from)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<SimEvent");
	for (var i = 1; i < eventCount; ++i) {
		builder.Append(", SimEvent");
	}
	builder.Append('>');
	return builder.ToString();
}
#>