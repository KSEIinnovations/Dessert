<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<# FillConditionItems(); #>
//
// ConditionCreators.cs
//
// Author(s):
//       Alessio Parma <alessio.parma@gmail.com>
//
// Copyright (c) 2012-2016 Alessio Parma <alessio.parma@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A TEMPLATE ON <#= DateTime.Now #>.
// DO NOT EDIT THIS FILE BY HAND, EVERY CHANGE WOULD BE LOST ON NEXT TEMPLATE RUN.

namespace Dessert
{
	using System;
    using System.Diagnostics.Contracts;
	using Core;
	using Events;

	public static partial class Sim
	{
<# foreach (var dummy in GetCombinedItems()) { #>
		#region CASE:<# var idx = 1; foreach (var item in CombinedItems) { #> <#= item.Tag(idx) #> <# idx += item.Weight; } idx = 0; #>


		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
<# for (var i = 1; i <= CombinedItemCount; ++i) { #>
        /// <typeparam name="T<#= i #>">An event type involved in the condition.</typeparam>
<# } idx = 1; foreach (var c in CombinedItems) { #>
        /// <param name="<#= c.Tag(idx) #>">An event involved in the condition.</param>
<# idx += c.Weight; } idx = 1; #>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static <#= Condition(CombinedItemCount) #> AllOf<#= ConditionGenerics(CombinedItemCount) #>(this SimEnvironment env, <#= ConditionParams() #>) <#= ConditionClauses(CombinedItemCount, 3) #>
		{
		    <#= GenericRequirements() #>
		    Contract.Ensures(Contract.Result<<#= Condition(CombinedItemCount) #>>() != null);
		    return new Condition<#= ConditionGenerics(CombinedItemCount) #>(ConditionEvaluators.AllEvents, <#= ConditionCtorParams() #>);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
<# for (var i = 1; i <= CombinedItemCount; ++i) { #>
        /// <typeparam name="T<#= i #>">An event type involved in the condition.</typeparam>
<# } idx = 1; foreach (var c in CombinedItems) { #>
        /// <param name="<#= c.Tag(idx) #>">An event involved in the condition.</param>
<# idx += c.Weight; } idx = 1; #>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static <#= Condition(CombinedItemCount) #> AnyOf<#= ConditionGenerics(CombinedItemCount) #>(this SimEnvironment env, <#= ConditionParams() #>) <#= ConditionClauses(CombinedItemCount, 3) #>
		{
		    <#= GenericRequirements() #>
		    Contract.Ensures(Contract.Result<<#= Condition(CombinedItemCount) #>>() != null);
		    return new Condition<#= ConditionGenerics(CombinedItemCount) #>(ConditionEvaluators.AnyEvent, <#= ConditionCtorParams() #>);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
<# for (var i = 1; i <= CombinedItemCount; ++i) { #>
        /// <typeparam name="T<#= i #>">An event type involved in the condition.</typeparam>
<# } idx = 1; foreach (var c in CombinedItems) { #>
        /// <param name="<#= c.Tag(idx) #>">An event involved in the condition.</param>
<# idx += c.Weight; } idx = 1; #>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static <#= Condition(CombinedItemCount) #> Condition<#= ConditionGenerics(CombinedItemCount) #>(this SimEnvironment env, <#= ConditionParams() #>, <#= ConditionEval(CombinedItemCount) #> eval) <#= ConditionClauses(CombinedItemCount, 3) #>
		{
		    <#= GenericRequirements() #>
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<<#= Condition(CombinedItemCount) #>>() != null);
		    Contract.Ensures(Contract.Result<<#= Condition(CombinedItemCount) #>>().Eval == eval);
		    return new Condition<#= ConditionGenerics(CombinedItemCount) #>(eval, <#= ConditionCtorParams() #>); 
		}

		#endregion

<# } #>
	}
}

<#+ // Functions used throughout the template
const int MaxEventCount = 5;

static readonly List<ItemToCombine> Items = new List<ItemToCombine>();
static readonly LinkedList<ItemToCombine> CombinedItems = new LinkedList<ItemToCombine>();
static int CombinedItemCount;

static string Condition(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<T1");
	for (var i = 2; i <= eventCount; ++i) {
		builder.AppendFormat(", T{0}", i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string Condition(int eventCount, int from)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<T" + from);
	for (var i = 1; i < eventCount; ++i) {
		builder.AppendFormat(", T{0}", from + i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string ConditionClauses(int eventCount, int tabCount)
{
	Debug.Assert(eventCount >= 1);
	var tabBuilder = new StringBuilder();
	for (var i = 0; i < tabCount; ++i) {
		tabBuilder.Append("    ");
	}
	var tabs = tabBuilder.ToString();
	var clauseBuilder = new StringBuilder();
	clauseBuilder.AppendLine();
	for (var i = 0; i < eventCount; ++i) {
		clauseBuilder.Append(tabs);
		clauseBuilder.AppendFormat("where T{0} : SimEvent", i + 1);
		if (i != eventCount - 1) {
			clauseBuilder.AppendLine();		
		}
	}
	return clauseBuilder.ToString();
}

static string ConditionCtorParams()
{
	var idx = 1;
	var en = CombinedItems.GetEnumerator();
	en.MoveNext();
	var builder = new StringBuilder(en.Current.CtorParams(idx));
	idx += en.Current.Weight;
	while (en.MoveNext()) {
		builder.AppendFormat(", {0}", en.Current.CtorParams(idx));
		idx += en.Current.Weight;
	}
	return builder.ToString();
}

static string ConditionEval(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("ConditionEval<T1");
	for (var i = 2; i <= eventCount; ++i) {
		builder.AppendFormat(", T{0}", i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string ConditionGenerics(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("<T1");
	for (var i = 2; i <= eventCount; ++i) {
		builder.AppendFormat(", T{0}", i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string ConditionParams()
{
	var idx = 1;
	var en = CombinedItems.GetEnumerator();
	en.MoveNext();
	var builder = new StringBuilder();
	builder.AppendFormat("{0} {1}", en.Current.Type(idx), en.Current.Tag(idx));
	idx += en.Current.Weight;
	while (en.MoveNext()) {
		builder.AppendFormat(", {0} {1}", en.Current.Type(idx), en.Current.Tag(idx));
		idx += en.Current.Weight;
	}
	return builder.ToString();
}

static void FillConditionItems()
{
	// An element representing a single event
	Items.Add(new EventItem());
	// And an element for each event count available for conditions
	for (var i = 1; i <= MaxEventCount; ++i) {
		Items.Add(new ConditionItem(i));
	}
}

static string GenericRequirements()
{
	var idx = 1;
	var en = CombinedItems.GetEnumerator();
	en.MoveNext();
	var builder = new StringBuilder("Contract.Requires<ArgumentNullException>(");
	builder.AppendFormat("{0} != null", en.Current.Tag(idx));
	idx += en.Current.Weight;
	while (en.MoveNext()) {
		builder.AppendFormat(" && {0} != null", en.Current.Tag(idx));
		idx += en.Current.Weight;
	}
	builder.AppendLine(", ErrorMessages.NullEvent);");
	
	builder.Append("            "); // 3 TABS
	builder.Append("Contract.Requires<ArgumentException>(");
	idx = 1;
	en = CombinedItems.GetEnumerator();
	en.MoveNext();
	builder.AppendFormat("ReferenceEquals({0}.Env, env)", en.Current.Tag(idx));
	idx += en.Current.Weight;
	while (en.MoveNext()) {
		builder.AppendFormat(" && ReferenceEquals({0}.Env, env)", en.Current.Tag(idx));
		idx += en.Current.Weight;
	}
	builder.Append(", ErrorMessages.NullEvent);");
	return builder.ToString();
}

static IEnumerable<bool> GetCombinedItems()
{
	foreach (var item in Items) {
		if (item.Weight + CombinedItemCount > MaxEventCount) {
			yield break;
		}
		CombinedItems.AddLast(item);
		CombinedItemCount += item.Weight;
		yield return true;
		foreach (var dummy in GetCombinedItems()) {
			yield return true;
		}
		CombinedItems.RemoveLast();
		CombinedItemCount -= item.Weight;
	}
}

abstract class ItemToCombine
{
	public readonly int Weight;
	readonly string _tagPrefix;
	
	protected ItemToCombine(string tagPrefix, int weight)
	{
		_tagPrefix = tagPrefix;
		Weight = weight;
	}

	public string Tag(int idx)
	{
		return _tagPrefix + idx;
	}

	public abstract string Type(int idx);
	public abstract string CtorParams(int idx);
}

sealed class EventItem : ItemToCombine
{
	public EventItem() : base("ev", 1)
	{
	}

	public override string Type(int idx)
	{
		return "T" + idx;
	}

	public override string CtorParams(int idx)
	{
		return Tag(idx);
	}
}

sealed class ConditionItem : ItemToCombine
{
	public ConditionItem(int weight) : base("c", weight)
	{
	}

	public override string Type(int idx)
	{
		return Condition(Weight, idx);
	}

	public override string CtorParams(int idx)
	{
		var prefix = Tag(idx) + ".Ev";
		var builder = new StringBuilder();
		builder.AppendFormat("{0}{1}", prefix, 1);
		for (var i = 2; i <= Weight; ++i) {
			builder.AppendFormat(", {0}{1}", prefix, i);
		}
		return builder.ToString();
	}
}
#>