//
// ConditionCreators.cs
//
// Author(s):
//       Alessio Parma <alessio.parma@gmail.com>
//
// Copyright (c) 2012-2014 Alessio Parma <alessio.parma@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A TEMPLATE ON 01/06/2015 11:02:50.
// DO NOT EDIT THIS FILE BY HAND, EVERY CHANGE WOULD BE LOST ON NEXT TEMPLATE RUN.

namespace Dessert
{
	using System;
    using System.Diagnostics.Contracts;
	using Core;
	using Events;

	public static partial class Sim
	{
		#region CASE: ev1 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1> AllOf<T1>(this SimEnvironment env, T1 ev1) 
            where T1 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1>>() != null);
		    return new Condition<T1>(ConditionEvaluators.AllEvents, ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1> AnyOf<T1>(this SimEnvironment env, T1 ev1) 
            where T1 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1>>() != null);
		    return new Condition<T1>(ConditionEvaluators.AnyEvent, ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1> Condition<T1>(this SimEnvironment env, T1 ev1, ConditionEval<T1> eval) 
            where T1 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1>>().Eval == eval);
		    return new Condition<T1>(eval, ev1); 
		}

		#endregion

		#region CASE: ev1  ev2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2> AllOf<T1, T2>(this SimEnvironment env, T1 ev1, T2 ev2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AllEvents, ev1, ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2> AnyOf<T1, T2>(this SimEnvironment env, T1 ev1, T2 ev2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AnyEvent, ev1, ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2> Condition<T1, T2>(this SimEnvironment env, T1 ev1, T2 ev2, ConditionEval<T1, T2> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>().Eval == eval);
		    return new Condition<T1, T2>(eval, ev1, ev2); 
		}

		#endregion

		#region CASE: ev1  ev2  ev3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, ev1, ev2, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, ev1, ev2, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, ev1, ev2, ev3); 
		}

		#endregion

		#region CASE: ev1  ev2  ev3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, ev2, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, ev2, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, ev2, ev3, ev4); 
		}

		#endregion

		#region CASE: ev1  ev2  ev3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, ev3, ev4, ev5); 
		}

		#endregion

		#region CASE: ev1  ev2  ev3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, ev3, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  ev2  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, ev2, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, ev2, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, ev2, ev3, c4.Ev1); 
		}

		#endregion

		#region CASE: ev1  ev2  ev3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, ev3, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: ev1  ev2  ev3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, ev3, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  ev2  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, T3 ev3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, ev3, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: ev1  ev2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, ev1, ev2, c3.Ev1); 
		}

		#endregion

		#region CASE: ev1  ev2  c3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, ev2, c3.Ev1, ev4); 
		}

		#endregion

		#region CASE: ev1  ev2  c3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, c3.Ev1, ev4, ev5); 
		}

		#endregion

		#region CASE: ev1  ev2  c3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, c3.Ev1, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  ev2  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, ev2, c3.Ev1, c4.Ev1); 
		}

		#endregion

		#region CASE: ev1  ev2  c3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, c3.Ev1, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: ev1  ev2  c3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, c3.Ev1, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  ev2  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3> c3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, c3.Ev1, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: ev1  ev2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4> c3, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, ev2, c3.Ev1, c3.Ev2); 
		}

		#endregion

		#region CASE: ev1  ev2  c3  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4> c3, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, c3.Ev1, c3.Ev2, ev5); 
		}

		#endregion

		#region CASE: ev1  ev2  c3  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4> c3, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, c3.Ev1, c3.Ev2, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  ev2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, ev2, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, ev2, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, T2 ev2, Condition<T3, T4, T5> c3, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, ev2, c3.Ev1, c3.Ev2, c3.Ev3); 
		}

		#endregion

		#region CASE: ev1  c2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2> AllOf<T1, T2>(this SimEnvironment env, T1 ev1, Condition<T2> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AllEvents, ev1, c2.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2> AnyOf<T1, T2>(this SimEnvironment env, T1 ev1, Condition<T2> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2> Condition<T1, T2>(this SimEnvironment env, T1 ev1, Condition<T2> c2, ConditionEval<T1, T2> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>().Eval == eval);
		    return new Condition<T1, T2>(eval, ev1, c2.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  ev3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, ev1, c2.Ev1, ev3); 
		}

		#endregion

		#region CASE: ev1  c2  ev3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, c2.Ev1, ev3, ev4); 
		}

		#endregion

		#region CASE: ev1  c2  ev3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, ev3, ev4, ev5); 
		}

		#endregion

		#region CASE: ev1  c2  ev3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, ev3, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, c2.Ev1, ev3, c4.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  ev3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, ev3, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: ev1  c2  ev3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, ev3, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, T3 ev3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, ev3, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: ev1  c2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, ev1, c2.Ev1, c3.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  c3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, c2.Ev1, c3.Ev1, ev4); 
		}

		#endregion

		#region CASE: ev1  c2  c3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c3.Ev1, ev4, ev5); 
		}

		#endregion

		#region CASE: ev1  c2  c3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c3.Ev1, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, c2.Ev1, c3.Ev1, c4.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  c3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c3.Ev1, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: ev1  c2  c3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c3.Ev1, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3> c3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c3.Ev1, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: ev1  c2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4> c3, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, c2.Ev1, c3.Ev1, c3.Ev2); 
		}

		#endregion

		#region CASE: ev1  c2  c3  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4> c3, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c3.Ev1, c3.Ev2, ev5); 
		}

		#endregion

		#region CASE: ev1  c2  c3  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4> c3, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c3.Ev1, c3.Ev2, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2> c2, Condition<T3, T4, T5> c3, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c3.Ev1, c3.Ev2, c3.Ev3); 
		}

		#endregion

		#region CASE: ev1  c2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, ev1, c2.Ev1, c2.Ev2); 
		}

		#endregion

		#region CASE: ev1  c2  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, c2.Ev1, c2.Ev2, ev4); 
		}

		#endregion

		#region CASE: ev1  c2  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c2.Ev2, ev4, ev5); 
		}

		#endregion

		#region CASE: ev1  c2  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c2.Ev2, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, c2.Ev1, c2.Ev2, c4.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c2.Ev2, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: ev1  c2  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c2.Ev2, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3> c2, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c2.Ev2, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: ev1  c2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, c2.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, c2.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4> c2, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, ev1, c2.Ev1, c2.Ev2, c2.Ev3); 
		}

		#endregion

		#region CASE: ev1  c2  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4> c2, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, c2.Ev3, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4> c2, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, c2.Ev3, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4> c2, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c2.Ev2, c2.Ev3, ev5); 
		}

		#endregion

		#region CASE: ev1  c2  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4> c2, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, c2.Ev3, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4> c2, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, c2.Ev3, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4> c2, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c2.Ev2, c2.Ev3, c5.Ev1); 
		}

		#endregion

		#region CASE: ev1  c2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4, T5> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, ev1, c2.Ev1, c2.Ev2, c2.Ev3, c2.Ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4, T5> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, ev1, c2.Ev1, c2.Ev2, c2.Ev3, c2.Ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="ev1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, T1 ev1, Condition<T2, T3, T4, T5> c2, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(ev1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, ev1, c2.Ev1, c2.Ev2, c2.Ev3, c2.Ev4); 
		}

		#endregion

		#region CASE: c1 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1> AllOf<T1>(this SimEnvironment env, Condition<T1> c1) 
            where T1 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1>>() != null);
		    return new Condition<T1>(ConditionEvaluators.AllEvents, c1.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1> AnyOf<T1>(this SimEnvironment env, Condition<T1> c1) 
            where T1 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1>>() != null);
		    return new Condition<T1>(ConditionEvaluators.AnyEvent, c1.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1> Condition<T1>(this SimEnvironment env, Condition<T1> c1, ConditionEval<T1> eval) 
            where T1 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1>>().Eval == eval);
		    return new Condition<T1>(eval, c1.Ev1); 
		}

		#endregion

		#region CASE: c1  ev2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2> AllOf<T1, T2>(this SimEnvironment env, Condition<T1> c1, T2 ev2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AllEvents, c1.Ev1, ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2> AnyOf<T1, T2>(this SimEnvironment env, Condition<T1> c1, T2 ev2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2> Condition<T1, T2>(this SimEnvironment env, Condition<T1> c1, T2 ev2, ConditionEval<T1, T2> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>().Eval == eval);
		    return new Condition<T1, T2>(eval, c1.Ev1, ev2); 
		}

		#endregion

		#region CASE: c1  ev2  ev3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, c1.Ev1, ev2, ev3); 
		}

		#endregion

		#region CASE: c1  ev2  ev3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, ev2, ev3, ev4); 
		}

		#endregion

		#region CASE: c1  ev2  ev3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, ev3, ev4, ev5); 
		}

		#endregion

		#region CASE: c1  ev2  ev3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, ev3, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  ev2  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, ev2, ev3, c4.Ev1); 
		}

		#endregion

		#region CASE: c1  ev2  ev3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, ev3, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: c1  ev2  ev3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, ev3, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  ev2  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, T3 ev3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, ev3, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: c1  ev2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, c1.Ev1, ev2, c3.Ev1); 
		}

		#endregion

		#region CASE: c1  ev2  c3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, ev2, c3.Ev1, ev4); 
		}

		#endregion

		#region CASE: c1  ev2  c3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, c3.Ev1, ev4, ev5); 
		}

		#endregion

		#region CASE: c1  ev2  c3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, c3.Ev1, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  ev2  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, ev2, c3.Ev1, c4.Ev1); 
		}

		#endregion

		#region CASE: c1  ev2  c3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, c3.Ev1, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: c1  ev2  c3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, c3.Ev1, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  ev2  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3> c3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, c3.Ev1, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: c1  ev2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4> c3, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, ev2, c3.Ev1, c3.Ev2); 
		}

		#endregion

		#region CASE: c1  ev2  c3  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4> c3, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, c3.Ev1, c3.Ev2, ev5); 
		}

		#endregion

		#region CASE: c1  ev2  c3  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4> c3, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, c3.Ev1, c3.Ev2, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  ev2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, ev2, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, ev2, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, T2 ev2, Condition<T3, T4, T5> c3, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, ev2, c3.Ev1, c3.Ev2, c3.Ev3); 
		}

		#endregion

		#region CASE: c1  c2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2> AllOf<T1, T2>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2> AnyOf<T1, T2>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2> Condition<T1, T2>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, ConditionEval<T1, T2> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>().Eval == eval);
		    return new Condition<T1, T2>(eval, c1.Ev1, c2.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  ev3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, c1.Ev1, c2.Ev1, ev3); 
		}

		#endregion

		#region CASE: c1  c2  ev3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c2.Ev1, ev3, ev4); 
		}

		#endregion

		#region CASE: c1  c2  ev3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, ev3, ev4, ev5); 
		}

		#endregion

		#region CASE: c1  c2  ev3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, ev3, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c2.Ev1, ev3, c4.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  ev3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, ev3, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: c1  c2  ev3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, ev3, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, T3 ev3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, ev3, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: c1  c2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, c1.Ev1, c2.Ev1, c3.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  c3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c2.Ev1, c3.Ev1, ev4); 
		}

		#endregion

		#region CASE: c1  c2  c3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c3.Ev1, ev4, ev5); 
		}

		#endregion

		#region CASE: c1  c2  c3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c3.Ev1, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  c3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: c1  c2  c3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3> c3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c3.Ev1, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: c1  c2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4> c3, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2); 
		}

		#endregion

		#region CASE: c1  c2  c3  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4> c3, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2, ev5); 
		}

		#endregion

		#region CASE: c1  c2  c3  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4> c3, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2> c2, Condition<T3, T4, T5> c3, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c3.Ev1, c3.Ev2, c3.Ev3); 
		}

		#endregion

		#region CASE: c1  c2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, c1.Ev1, c2.Ev1, c2.Ev2); 
		}

		#endregion

		#region CASE: c1  c2  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c2.Ev1, c2.Ev2, ev4); 
		}

		#endregion

		#region CASE: c1  c2  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c2.Ev2, ev4, ev5); 
		}

		#endregion

		#region CASE: c1  c2  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c2.Ev2, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: c1  c2  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c2  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3> c2, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c2.Ev2, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: c1  c2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4> c2, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3); 
		}

		#endregion

		#region CASE: c1  c2  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4> c2, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4> c2, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4> c2, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3, ev5); 
		}

		#endregion

		#region CASE: c1  c2  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4> c2, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4> c2, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4> c2, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c2 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4, T5> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3, c2.Ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4, T5> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3, c2.Ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c2">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1> c1, Condition<T2, T3, T4, T5> c2, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c2.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3, c2.Ev4); 
		}

		#endregion

		#region CASE: c1 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2> AllOf<T1, T2>(this SimEnvironment env, Condition<T1, T2> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2> AnyOf<T1, T2>(this SimEnvironment env, Condition<T1, T2> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    return new Condition<T1, T2>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2> Condition<T1, T2>(this SimEnvironment env, Condition<T1, T2> c1, ConditionEval<T1, T2> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>().Eval == eval);
		    return new Condition<T1, T2>(eval, c1.Ev1, c1.Ev2); 
		}

		#endregion

		#region CASE: c1  ev3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, c1.Ev1, c1.Ev2, ev3); 
		}

		#endregion

		#region CASE: c1  ev3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c1.Ev2, ev3, ev4); 
		}

		#endregion

		#region CASE: c1  ev3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, ev3, ev4, ev5); 
		}

		#endregion

		#region CASE: c1  ev3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, ev3, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c1.Ev2, ev3, c4.Ev1); 
		}

		#endregion

		#region CASE: c1  ev3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, ev3, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: c1  ev3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, ev3, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  ev3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, T3 ev3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, ev3, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: c1  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, c1.Ev1, c1.Ev2, c3.Ev1); 
		}

		#endregion

		#region CASE: c1  c3  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c1.Ev2, c3.Ev1, ev4); 
		}

		#endregion

		#region CASE: c1  c3  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c3.Ev1, ev4, ev5); 
		}

		#endregion

		#region CASE: c1  c3  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c3.Ev1, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1); 
		}

		#endregion

		#region CASE: c1  c3  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: c1  c3  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c3  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3> c3, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c3.Ev1, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: c1  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4> c3, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2); 
		}

		#endregion

		#region CASE: c1  c3  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4> c3, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4> c3, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2, ev5); 
		}

		#endregion

		#region CASE: c1  c3  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4> c3, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4> c3, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c3 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4, T5> c3) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2, c3.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c3">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2> c1, Condition<T3, T4, T5> c3, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c3 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c3.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c3.Ev1, c3.Ev2, c3.Ev3); 
		}

		#endregion

		#region CASE: c1 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AllOf<T1, T2, T3>(this SimEnvironment env, Condition<T1, T2, T3> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3> AnyOf<T1, T2, T3>(this SimEnvironment env, Condition<T1, T2, T3> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    return new Condition<T1, T2, T3>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3> Condition<T1, T2, T3>(this SimEnvironment env, Condition<T1, T2, T3> c1, ConditionEval<T1, T2, T3> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>().Eval == eval);
		    return new Condition<T1, T2, T3>(eval, c1.Ev1, c1.Ev2, c1.Ev3); 
		}

		#endregion

		#region CASE: c1  ev4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2, T3> c1, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2, T3> c1, T4 ev4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2, T3> c1, T4 ev4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c1.Ev2, c1.Ev3, ev4); 
		}

		#endregion

		#region CASE: c1  ev4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, T4 ev4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, T4 ev4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c1.Ev3, ev4, ev5); 
		}

		#endregion

		#region CASE: c1  ev4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, T4 ev4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, T4 ev4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c1.Ev3, ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4> c4, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1); 
		}

		#endregion

		#region CASE: c1  c4  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4> c4, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4> c4, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1, ev5); 
		}

		#endregion

		#region CASE: c1  c4  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4> c4, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4> c4, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1, c5.Ev1); 
		}

		#endregion

		#region CASE: c1  c4 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4, T5> c4) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1, c4.Ev2);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c4">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3> c1, Condition<T4, T5> c4, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c4 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c4.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c1.Ev3, c4.Ev1, c4.Ev2); 
		}

		#endregion

		#region CASE: c1 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AllOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2, T3, T4> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> AnyOf<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2, T3, T4> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    return new Condition<T1, T2, T3, T4>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4> Condition<T1, T2, T3, T4>(this SimEnvironment env, Condition<T1, T2, T3, T4> c1, ConditionEval<T1, T2, T3, T4> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4>(eval, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4); 
		}

		#endregion

		#region CASE: c1  ev5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3, T4> c1, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3, T4> c1, T5 ev5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="ev5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3, T4> c1, T5 ev5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && ev5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(ev5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, ev5); 
		}

		#endregion

		#region CASE: c1  c5 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3, T4> c1, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3, T4> c1, Condition<T5> c5) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, c5.Ev1);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
        /// <param name="c5">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3, T4> c1, Condition<T5> c5, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null && c5 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env) && ReferenceEquals(c5.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, c5.Ev1); 
		}

		#endregion

		#region CASE: c1 

		/// <summary>
        ///   Returns a condition event that waits for all given events.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits for all given events.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AllOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3, T4, T5> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AllEvents, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, c1.Ev5);
		}
		
		/// <summary>
        ///   Returns a condition event that waits until one of given events is triggered.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <returns>A condition event that waits until one of given events is triggered.</returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> AnyOf<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3, T4, T5> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    return new Condition<T1, T2, T3, T4, T5>(ConditionEvaluators.AnyEvent, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, c1.Ev5);
		}
		
		/// <summary>
        ///   Returns a condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </summary>
        /// <typeparam name="T1">An event type involved in the condition.</typeparam>
        /// <typeparam name="T2">An event type involved in the condition.</typeparam>
        /// <typeparam name="T3">An event type involved in the condition.</typeparam>
        /// <typeparam name="T4">An event type involved in the condition.</typeparam>
        /// <typeparam name="T5">An event type involved in the condition.</typeparam>
        /// <param name="c1">An event involved in the condition.</param>
		/// <param name="env">The environment to which given events belong.</param>
        /// <param name="eval">The function used to evalute the condition.</param>
        /// <returns>
        ///   A condition event, that groups several events and is triggered if a given condition
        ///   (implemented by the evaluate function) becomes true.
        /// </returns>
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Condition<T1, T2, T3, T4, T5>(this SimEnvironment env, Condition<T1, T2, T3, T4, T5> c1, ConditionEval<T1, T2, T3, T4, T5> eval) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
		    Contract.Requires<ArgumentNullException>(c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, env), ErrorMessages.NullEvent);
		    Contract.Requires<ArgumentNullException>(eval != null, ErrorMessages.NullEvaluator);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>().Eval == eval);
		    return new Condition<T1, T2, T3, T4, T5>(eval, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, c1.Ev5); 
		}

		#endregion

	}
}

