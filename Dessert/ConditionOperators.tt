<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
//
// ConditionOperators.cs
//
// Author(s):
//       Alessio Parma <alessio.parma@gmail.com>
//
// Copyright (c) 2012-2016 Alessio Parma <alessio.parma@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A TEMPLATE ON <#= DateTime.Now #>.
// DO NOT EDIT THIS FILE BY HAND, EVERY CHANGE WOULD BE LOST ON NEXT TEMPLATE RUN.

namespace Dessert
{
	using System;
    using System.Diagnostics.Contracts;
	using Core;
	using Events;

	public static partial class Sim
	{
		/// <summary>
        ///   Returns a condition event that is marked as succeeded when both events have been successful.
        /// </summary>
        /// <param name="ev1">The first event which is put in the and condition.</param>
        /// <param name="ev2">The second event which is put in the and condition.</param>
        /// <returns>
        ///   A condition event that is marked as succeeded when both events have been successful.
        /// </returns>
		[Pure]
		public static <#= Condition(2) #> And<#= ConditionGenerics(2) #>(this T1 ev1, T2 ev2) <#= ConditionClauses(2, 3) #>
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, ev2.Env), ErrorMessages.DifferentEnvironment);
            return new <#= Condition(2) #>(ConditionEvaluators.AllEvents, ev1, ev2);
		}

		/// <summary>
        ///   Returns a condition event that is marked as succeeded when any event has been successful.
        /// </summary>
        /// <param name="ev1">The first event which is put in the or condition.</param>
        /// <param name="ev2">The second event which is put in the or condition.</param>
        /// <returns>
        ///   A condition event that is marked as succeeded when any event has been successful.
        /// </returns>
		[Pure]
		public static <#= Condition(2) #> Or<#= ConditionGenerics(2) #>(this T1 ev1, T2 ev2) <#= ConditionClauses(2, 3) #>
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, ev2.Env), ErrorMessages.DifferentEnvironment);
            return new <#= Condition(2) #>(ConditionEvaluators.AnyEvent, ev1, ev2);
		}

<# for(int i = 1; i < MaxEventCount; ++i) { #>
		[Pure]
		public static <#= Condition(i+1) #> And<#= ConditionGenerics(i+1) #>(this T1 ev1, <#= Condition(i, 2) #> c1) <#= ConditionClauses(i+1, 3) #>
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<<#= Condition(i+1) #>>() != null);
            return new <#= Condition(i+1) #>(c => ev1.Succeeded && c1.Eval(c1), ev1<# for(int j = 1; j <= i; ++j) { #>, c1.Ev<#= j #><# } #>);
		}
		
		[Pure]
		public static <#= Condition(i+1) #> And<#= ConditionGenerics(i+1) #>(this <#= Condition(i) #> c1, T<#= i+1 #> ev1) <#= ConditionClauses(i+1, 3) #>
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<<#= Condition(i+1) #>>() != null);
            return new <#= Condition(i+1) #>(c => ev1.Succeeded && c1.Eval(c1)<# for(int j = 1; j <= i; ++j) { #>, c1.Ev<#= j #><# } #>, ev1);
		}
		
		[Pure]
		public static <#= Condition(i+1) #> Or<#= ConditionGenerics(i+1) #>(this T1 ev1, <#= Condition(i, 2) #> c1) <#= ConditionClauses(i+1, 3) #>
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<<#= Condition(i+1) #>>() != null);
            return new <#= Condition(i+1) #>(c => ev1.Succeeded || c1.Eval(c1), ev1<# for(int j = 1; j <= i; ++j) { #>, c1.Ev<#= j #><# } #>);
		}
		
		[Pure]
		public static <#= Condition(i+1) #> Or<#= ConditionGenerics(i+1) #>(this <#= Condition(i) #> c1, T<#= i+1 #> ev1) <#= ConditionClauses(i+1, 3) #>
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<<#= Condition(i+1) #>>() != null);
            return new <#= Condition(i+1) #>(c => ev1.Succeeded || c1.Eval(c1)<# for(int j = 1; j <= i; ++j) { #>, c1.Ev<#= j #><# } #>, ev1);
		}

<# for(int k = 1; k < MaxEventCount - i; ++k) { #>
		[Pure]
		public static <#= Condition(i+k) #> And<#= ConditionGenerics(i+k) #>(this <#= Condition(i) #> c1, <#= Condition(k, i+1) #> c2) <#= ConditionClauses(i+k, 3) #>
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<<#= Condition(i+k) #>>() != null);
            return new <#= Condition(i+k) #>(c => c1.Eval(c1) && c2.Eval(c2)<# for(int j = 1; j <= i; ++j) { #>, c1.Ev<#= j #><# } #><# for(int j = 1; j <= k; ++j) { #>, c2.Ev<#= j #><# } #>);
		}
		
		[Pure]
		public static <#= Condition(i+k) #> Or<#= ConditionGenerics(i+k) #>(this <#= Condition(i) #> c1, <#= Condition(k, i+1) #> c2) <#= ConditionClauses(i+k, 3) #>
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<<#= Condition(i+k) #>>() != null);
            return new <#= Condition(i+k) #>(c => c1.Eval(c1) || c2.Eval(c2)<# for(int j = 1; j <= i; ++j) { #>, c1.Ev<#= j #><# } #><# for(int j = 1; j <= k; ++j) { #>, c2.Ev<#= j #><# } #>);
		}

<# }} #>
	}

	public partial class SimEvent
	{
        /// <summary>
        ///   Returns a condition event that is marked as succeeded when both events have been successful.
        /// </summary>
        /// <param name="ev1">The first event which is put in the and condition.</param>
        /// <param name="ev2">The second event which is put in the and condition.</param>
        /// <returns>
        ///   A condition event that is marked as succeeded when both events have been successful.
        /// </returns>
		[Pure]
		public static Condition<SimEvent, SimEvent> operator &(SimEvent ev1, SimEvent ev2)
        {
			Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, ev2.Env), ErrorMessages.DifferentEnvironment);
            return new Condition<SimEvent, SimEvent>(ConditionEvaluators.AllEvents, ev1, ev2);
        }

        /// <summary>
        ///   Returns a condition event that is marked as succeeded when any event has been successful.
        /// </summary>
        /// <param name="ev1">The first event which is put in the or condition.</param>
        /// <param name="ev2">The second event which is put in the or condition.</param>
        /// <returns>
        ///   A condition event that is marked as succeeded when any event has been successful.
        /// </returns>
		[Pure]
		public static Condition<SimEvent, SimEvent> operator |(SimEvent ev1, SimEvent ev2)
        {
			Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, ev2.Env), ErrorMessages.DifferentEnvironment);
            return new Condition<SimEvent, SimEvent>(ConditionEvaluators.AnyEvent, ev1, ev2);
        }

<# for(int i = 1; i < MaxEventCount; ++i) { #>
		[Pure]
		public static <#= GenericCondition(i+1) #> operator &(SimEvent ev, <#= GenericCondition(i, 2) #> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<<#= GenericCondition(i+1) #>>() != null);
            return new <#= GenericCondition(i+1) #>(cc => ev.Succeeded && c.Eval(c), ev<# for(int j = 1; j <= i; ++j) { #>, c.Ev<#= j #><# } #>);
		}

		[Pure]
		public static <#= GenericCondition(i+1) #> operator |(SimEvent ev, <#= GenericCondition(i, 2) #> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<<#= GenericCondition(i+1) #>>() != null);
            return new <#= GenericCondition(i+1) #>(cc => ev.Succeeded || c.Eval(c), ev<# for(int j = 1; j <= i; ++j) { #>, c.Ev<#= j #><# } #>);
		}

<# } #>
	}
}

<#+ // Functions used throughout the template
const int MaxEventCount = 5;

static string Condition(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<T1");
	for (var i = 2; i <= eventCount; ++i) {
		builder.AppendFormat(", T{0}", i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string Condition(int eventCount, int from)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<T" + from);
	for (var i = 1; i < eventCount; ++i) {
		builder.AppendFormat(", T{0}", from + i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string ConditionClauses(int eventCount, int tabCount)
{
	Debug.Assert(eventCount >= 1);
	var tabBuilder = new StringBuilder();
	for (var i = 0; i < tabCount; ++i) {
		tabBuilder.Append("    ");
	}
	var tabs = tabBuilder.ToString();
	var clauseBuilder = new StringBuilder();
	clauseBuilder.AppendLine();
	for (var i = 0; i < eventCount; ++i) {
		clauseBuilder.Append(tabs);
		clauseBuilder.AppendFormat("where T{0} : SimEvent", i + 1);
		if (i != eventCount - 1) {
			clauseBuilder.AppendLine();		
		}
	}
	return clauseBuilder.ToString();
}

static string ConditionGenerics(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("<T1");
	for (var i = 2; i <= eventCount; ++i) {
		builder.AppendFormat(", T{0}", i);
	}
	builder.Append('>');
	return builder.ToString();
}

static string GenericCondition(int eventCount)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<SimEvent");
	for (var i = 2; i <= eventCount; ++i) {
		builder.Append(", SimEvent");
	}
	builder.Append('>');
	return builder.ToString();
}

static string GenericCondition(int eventCount, int from)
{
	Debug.Assert(eventCount >= 1);
	var builder = new StringBuilder("Condition<SimEvent");
	for (var i = 1; i < eventCount; ++i) {
		builder.Append(", SimEvent");
	}
	builder.Append('>');
	return builder.ToString();
}
#>