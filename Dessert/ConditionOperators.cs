//
// ConditionOperators.cs
//
// Author(s):
//       Alessio Parma <alessio.parma@gmail.com>
//
// Copyright (c) 2012-2014 Alessio Parma <alessio.parma@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A TEMPLATE ON 01/06/2015 11:02:51.
// DO NOT EDIT THIS FILE BY HAND, EVERY CHANGE WOULD BE LOST ON NEXT TEMPLATE RUN.

namespace Dessert
{
	using System;
    using System.Diagnostics.Contracts;
	using Core;
	using Events;

	public static partial class Sim
	{
		/// <summary>
        ///   Returns a condition event that is marked as succeeded when both events have been successful.
        /// </summary>
        /// <param name="ev1">The first event which is put in the and condition.</param>
        /// <param name="ev2">The second event which is put in the and condition.</param>
        /// <returns>
        ///   A condition event that is marked as succeeded when both events have been successful.
        /// </returns>
		[Pure]
		public static Condition<T1, T2> And<T1, T2>(this T1 ev1, T2 ev2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, ev2.Env), ErrorMessages.DifferentEnvironment);
            return new Condition<T1, T2>(ConditionEvaluators.AllEvents, ev1, ev2);
		}

		/// <summary>
        ///   Returns a condition event that is marked as succeeded when any event has been successful.
        /// </summary>
        /// <param name="ev1">The first event which is put in the or condition.</param>
        /// <param name="ev2">The second event which is put in the or condition.</param>
        /// <returns>
        ///   A condition event that is marked as succeeded when any event has been successful.
        /// </returns>
		[Pure]
		public static Condition<T1, T2> Or<T1, T2>(this T1 ev1, T2 ev2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, ev2.Env), ErrorMessages.DifferentEnvironment);
            return new Condition<T1, T2>(ConditionEvaluators.AnyEvent, ev1, ev2);
		}

		[Pure]
		public static Condition<T1, T2> And<T1, T2>(this T1 ev1, Condition<T2> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
            return new Condition<T1, T2>(c => ev1.Succeeded && c1.Eval(c1), ev1, c1.Ev1);
		}
		
		[Pure]
		public static Condition<T1, T2> And<T1, T2>(this Condition<T1> c1, T2 ev1) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
            return new Condition<T1, T2>(c => ev1.Succeeded && c1.Eval(c1), c1.Ev1, ev1);
		}
		
		[Pure]
		public static Condition<T1, T2> Or<T1, T2>(this T1 ev1, Condition<T2> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
            return new Condition<T1, T2>(c => ev1.Succeeded || c1.Eval(c1), ev1, c1.Ev1);
		}
		
		[Pure]
		public static Condition<T1, T2> Or<T1, T2>(this Condition<T1> c1, T2 ev1) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
            return new Condition<T1, T2>(c => ev1.Succeeded || c1.Eval(c1), c1.Ev1, ev1);
		}

		[Pure]
		public static Condition<T1, T2> And<T1, T2>(this Condition<T1> c1, Condition<T2> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
            return new Condition<T1, T2>(c => c1.Eval(c1) && c2.Eval(c2), c1.Ev1, c2.Ev1);
		}
		
		[Pure]
		public static Condition<T1, T2> Or<T1, T2>(this Condition<T1> c1, Condition<T2> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2>>() != null);
            return new Condition<T1, T2>(c => c1.Eval(c1) || c2.Eval(c2), c1.Ev1, c2.Ev1);
		}

		[Pure]
		public static Condition<T1, T2, T3> And<T1, T2, T3>(this Condition<T1> c1, Condition<T2, T3> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
            return new Condition<T1, T2, T3>(c => c1.Eval(c1) && c2.Eval(c2), c1.Ev1, c2.Ev1, c2.Ev2);
		}
		
		[Pure]
		public static Condition<T1, T2, T3> Or<T1, T2, T3>(this Condition<T1> c1, Condition<T2, T3> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
            return new Condition<T1, T2, T3>(c => c1.Eval(c1) || c2.Eval(c2), c1.Ev1, c2.Ev1, c2.Ev2);
		}

		[Pure]
		public static Condition<T1, T2, T3, T4> And<T1, T2, T3, T4>(this Condition<T1> c1, Condition<T2, T3, T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => c1.Eval(c1) && c2.Eval(c2), c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3);
		}
		
		[Pure]
		public static Condition<T1, T2, T3, T4> Or<T1, T2, T3, T4>(this Condition<T1> c1, Condition<T2, T3, T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => c1.Eval(c1) || c2.Eval(c2), c1.Ev1, c2.Ev1, c2.Ev2, c2.Ev3);
		}

		[Pure]
		public static Condition<T1, T2, T3> And<T1, T2, T3>(this T1 ev1, Condition<T2, T3> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
            return new Condition<T1, T2, T3>(c => ev1.Succeeded && c1.Eval(c1), ev1, c1.Ev1, c1.Ev2);
		}
		
		[Pure]
		public static Condition<T1, T2, T3> And<T1, T2, T3>(this Condition<T1, T2> c1, T3 ev1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
            return new Condition<T1, T2, T3>(c => ev1.Succeeded && c1.Eval(c1), c1.Ev1, c1.Ev2, ev1);
		}
		
		[Pure]
		public static Condition<T1, T2, T3> Or<T1, T2, T3>(this T1 ev1, Condition<T2, T3> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
            return new Condition<T1, T2, T3>(c => ev1.Succeeded || c1.Eval(c1), ev1, c1.Ev1, c1.Ev2);
		}
		
		[Pure]
		public static Condition<T1, T2, T3> Or<T1, T2, T3>(this Condition<T1, T2> c1, T3 ev1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
            return new Condition<T1, T2, T3>(c => ev1.Succeeded || c1.Eval(c1), c1.Ev1, c1.Ev2, ev1);
		}

		[Pure]
		public static Condition<T1, T2, T3> And<T1, T2, T3>(this Condition<T1, T2> c1, Condition<T3> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
            return new Condition<T1, T2, T3>(c => c1.Eval(c1) && c2.Eval(c2), c1.Ev1, c1.Ev2, c2.Ev1);
		}
		
		[Pure]
		public static Condition<T1, T2, T3> Or<T1, T2, T3>(this Condition<T1, T2> c1, Condition<T3> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3>>() != null);
            return new Condition<T1, T2, T3>(c => c1.Eval(c1) || c2.Eval(c2), c1.Ev1, c1.Ev2, c2.Ev1);
		}

		[Pure]
		public static Condition<T1, T2, T3, T4> And<T1, T2, T3, T4>(this Condition<T1, T2> c1, Condition<T3, T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => c1.Eval(c1) && c2.Eval(c2), c1.Ev1, c1.Ev2, c2.Ev1, c2.Ev2);
		}
		
		[Pure]
		public static Condition<T1, T2, T3, T4> Or<T1, T2, T3, T4>(this Condition<T1, T2> c1, Condition<T3, T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => c1.Eval(c1) || c2.Eval(c2), c1.Ev1, c1.Ev2, c2.Ev1, c2.Ev2);
		}

		[Pure]
		public static Condition<T1, T2, T3, T4> And<T1, T2, T3, T4>(this T1 ev1, Condition<T2, T3, T4> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => ev1.Succeeded && c1.Eval(c1), ev1, c1.Ev1, c1.Ev2, c1.Ev3);
		}
		
		[Pure]
		public static Condition<T1, T2, T3, T4> And<T1, T2, T3, T4>(this Condition<T1, T2, T3> c1, T4 ev1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => ev1.Succeeded && c1.Eval(c1), c1.Ev1, c1.Ev2, c1.Ev3, ev1);
		}
		
		[Pure]
		public static Condition<T1, T2, T3, T4> Or<T1, T2, T3, T4>(this T1 ev1, Condition<T2, T3, T4> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => ev1.Succeeded || c1.Eval(c1), ev1, c1.Ev1, c1.Ev2, c1.Ev3);
		}
		
		[Pure]
		public static Condition<T1, T2, T3, T4> Or<T1, T2, T3, T4>(this Condition<T1, T2, T3> c1, T4 ev1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => ev1.Succeeded || c1.Eval(c1), c1.Ev1, c1.Ev2, c1.Ev3, ev1);
		}

		[Pure]
		public static Condition<T1, T2, T3, T4> And<T1, T2, T3, T4>(this Condition<T1, T2, T3> c1, Condition<T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => c1.Eval(c1) && c2.Eval(c2), c1.Ev1, c1.Ev2, c1.Ev3, c2.Ev1);
		}
		
		[Pure]
		public static Condition<T1, T2, T3, T4> Or<T1, T2, T3, T4>(this Condition<T1, T2, T3> c1, Condition<T4> c2) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(c1 != null && c2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(c1.Env, c2.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4>>() != null);
            return new Condition<T1, T2, T3, T4>(c => c1.Eval(c1) || c2.Eval(c2), c1.Ev1, c1.Ev2, c1.Ev3, c2.Ev1);
		}

		[Pure]
		public static Condition<T1, T2, T3, T4, T5> And<T1, T2, T3, T4, T5>(this T1 ev1, Condition<T2, T3, T4, T5> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
            return new Condition<T1, T2, T3, T4, T5>(c => ev1.Succeeded && c1.Eval(c1), ev1, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4);
		}
		
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> And<T1, T2, T3, T4, T5>(this Condition<T1, T2, T3, T4> c1, T5 ev1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
            return new Condition<T1, T2, T3, T4, T5>(c => ev1.Succeeded && c1.Eval(c1), c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, ev1);
		}
		
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Or<T1, T2, T3, T4, T5>(this T1 ev1, Condition<T2, T3, T4, T5> c1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
            return new Condition<T1, T2, T3, T4, T5>(c => ev1.Succeeded || c1.Eval(c1), ev1, c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4);
		}
		
		[Pure]
		public static Condition<T1, T2, T3, T4, T5> Or<T1, T2, T3, T4, T5>(this Condition<T1, T2, T3, T4> c1, T5 ev1) 
            where T1 : SimEvent
            where T2 : SimEvent
            where T3 : SimEvent
            where T4 : SimEvent
            where T5 : SimEvent
		{
			Contract.Requires<ArgumentNullException>(ev1 != null && c1 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, c1.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<T1, T2, T3, T4, T5>>() != null);
            return new Condition<T1, T2, T3, T4, T5>(c => ev1.Succeeded || c1.Eval(c1), c1.Ev1, c1.Ev2, c1.Ev3, c1.Ev4, ev1);
		}

	}

	public partial class SimEvent
	{
        /// <summary>
        ///   Returns a condition event that is marked as succeeded when both events have been successful.
        /// </summary>
        /// <param name="ev1">The first event which is put in the and condition.</param>
        /// <param name="ev2">The second event which is put in the and condition.</param>
        /// <returns>
        ///   A condition event that is marked as succeeded when both events have been successful.
        /// </returns>
		[Pure]
		public static Condition<SimEvent, SimEvent> operator &(SimEvent ev1, SimEvent ev2)
        {
			Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, ev2.Env), ErrorMessages.DifferentEnvironment);
            return new Condition<SimEvent, SimEvent>(ConditionEvaluators.AllEvents, ev1, ev2);
        }

        /// <summary>
        ///   Returns a condition event that is marked as succeeded when any event has been successful.
        /// </summary>
        /// <param name="ev1">The first event which is put in the or condition.</param>
        /// <param name="ev2">The second event which is put in the or condition.</param>
        /// <returns>
        ///   A condition event that is marked as succeeded when any event has been successful.
        /// </returns>
		[Pure]
		public static Condition<SimEvent, SimEvent> operator |(SimEvent ev1, SimEvent ev2)
        {
			Contract.Requires<ArgumentNullException>(ev1 != null && ev2 != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev1.Env, ev2.Env), ErrorMessages.DifferentEnvironment);
            return new Condition<SimEvent, SimEvent>(ConditionEvaluators.AnyEvent, ev1, ev2);
        }

		[Pure]
		public static Condition<SimEvent, SimEvent> operator &(SimEvent ev, Condition<SimEvent> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<SimEvent, SimEvent>>() != null);
            return new Condition<SimEvent, SimEvent>(cc => ev.Succeeded && c.Eval(c), ev, c.Ev1);
		}

		[Pure]
		public static Condition<SimEvent, SimEvent> operator |(SimEvent ev, Condition<SimEvent> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<SimEvent, SimEvent>>() != null);
            return new Condition<SimEvent, SimEvent>(cc => ev.Succeeded || c.Eval(c), ev, c.Ev1);
		}

		[Pure]
		public static Condition<SimEvent, SimEvent, SimEvent> operator &(SimEvent ev, Condition<SimEvent, SimEvent> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<SimEvent, SimEvent, SimEvent>>() != null);
            return new Condition<SimEvent, SimEvent, SimEvent>(cc => ev.Succeeded && c.Eval(c), ev, c.Ev1, c.Ev2);
		}

		[Pure]
		public static Condition<SimEvent, SimEvent, SimEvent> operator |(SimEvent ev, Condition<SimEvent, SimEvent> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<SimEvent, SimEvent, SimEvent>>() != null);
            return new Condition<SimEvent, SimEvent, SimEvent>(cc => ev.Succeeded || c.Eval(c), ev, c.Ev1, c.Ev2);
		}

		[Pure]
		public static Condition<SimEvent, SimEvent, SimEvent, SimEvent> operator &(SimEvent ev, Condition<SimEvent, SimEvent, SimEvent> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<SimEvent, SimEvent, SimEvent, SimEvent>>() != null);
            return new Condition<SimEvent, SimEvent, SimEvent, SimEvent>(cc => ev.Succeeded && c.Eval(c), ev, c.Ev1, c.Ev2, c.Ev3);
		}

		[Pure]
		public static Condition<SimEvent, SimEvent, SimEvent, SimEvent> operator |(SimEvent ev, Condition<SimEvent, SimEvent, SimEvent> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<SimEvent, SimEvent, SimEvent, SimEvent>>() != null);
            return new Condition<SimEvent, SimEvent, SimEvent, SimEvent>(cc => ev.Succeeded || c.Eval(c), ev, c.Ev1, c.Ev2, c.Ev3);
		}

		[Pure]
		public static Condition<SimEvent, SimEvent, SimEvent, SimEvent, SimEvent> operator &(SimEvent ev, Condition<SimEvent, SimEvent, SimEvent, SimEvent> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<SimEvent, SimEvent, SimEvent, SimEvent, SimEvent>>() != null);
            return new Condition<SimEvent, SimEvent, SimEvent, SimEvent, SimEvent>(cc => ev.Succeeded && c.Eval(c), ev, c.Ev1, c.Ev2, c.Ev3, c.Ev4);
		}

		[Pure]
		public static Condition<SimEvent, SimEvent, SimEvent, SimEvent, SimEvent> operator |(SimEvent ev, Condition<SimEvent, SimEvent, SimEvent, SimEvent> c)
		{
			Contract.Requires<ArgumentNullException>(ev != null && c != null, ErrorMessages.NullEvent);
            Contract.Requires<ArgumentException>(ReferenceEquals(ev.Env, c.Env), ErrorMessages.DifferentEnvironment);
		    Contract.Ensures(Contract.Result<Condition<SimEvent, SimEvent, SimEvent, SimEvent, SimEvent>>() != null);
            return new Condition<SimEvent, SimEvent, SimEvent, SimEvent, SimEvent>(cc => ev.Succeeded || c.Eval(c), ev, c.Ev1, c.Ev2, c.Ev3, c.Ev4);
		}

	}
}

