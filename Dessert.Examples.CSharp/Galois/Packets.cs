//
// Packets.cs
//  
// Author(s):
//       Alessio Parma <alessio.parma@gmail.com>
//       Artur Tolstenco <tartur88@gmail.com>
// 
// Copyright (c) 2012-2016 Alessio Parma <alessio.parma@gmail.com>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

namespace Dessert.Examples.CSharp.Galois
{
    /// <summary>
    ///   A struct representing the packet generated by the erasure code.
    /// </summary>
    struct CodePacket
    {
        public readonly int Keeper;
        public readonly int Len;
        public readonly int Owner;

        public CodePacket(int owner, int keeper, int len)
        {
            Owner = owner;
            Keeper = keeper;
            Len = len;
        }

        public override string ToString()
        {
            return string.Format("CodePacket(Owner: {0}, Keeper: {1}, Len: {2})", Owner, Keeper, Len);
        }
    }

    /// <summary>
    ///   At low level a server receive a certain amount of UDPPackets.
    ///   The UDPPackets must then be put together in order to make up the data.
    ///   So, the server receives the UDPPackets, aggregate them to make one or more RequestPackets.
    /// </summary>
    struct RequestPacket
    {
        public readonly int Owner;
        public readonly object SessionId;

        public RequestPacket(int owner, object sessionId)
        {
            Owner = owner;
            SessionId = sessionId;
        }

        public override string ToString()
        {
            return string.Format("RequestPacket(Owner: {0}, SessionId: {1})", Owner, SessionId);
        }
    }

    /// <summary>
    ///   A struct representing the information contained in the header of an UDP packet.
    /// </summary>
    struct UdpPacket
    {
        public readonly int Count;
        public readonly int Dst;
        public readonly int Len;
        public readonly object SessionId;
        public readonly int Src;
        public readonly PacketType Type;

        public UdpPacket(object sessionId, int src, int dst, int len, PacketType type, int count)
        {
            SessionId = sessionId;
            Src = src;
            Dst = dst;
            Len = len;
            Type = type;
            Count = count;
        }

        public override string ToString()
        {
            return string.Format("UdpPacket(SessionId: {0}, Src: {1}, Dst: {2}, Type: {3})", SessionId, Src, Dst, Type);
        }
    }
}